"""
连续导航系统配置文件

包含所有连续导航模式的配置参数
"""

import numpy as np
from gym_pybullet_drones.utils.enums import ObservationType, ActionType

# =============================================================================
# 基础配置
# =============================================================================

# 默认参数设置
DEFAULT_GUI = True  # 是否显示PyBullet GUI界面
DEFAULT_RECORD_VIDEO = False  # 是否录制演示视频
DEFAULT_OUTPUT_FOLDER = 'results'  # 模型结果文件夹路径

# 观测和动作类型
DEFAULT_OBS = ObservationType('kin')  # 观测类型：'kin'（动力学）
DEFAULT_ACT = ActionType('rpm')  # 动作类型：'rpm'（转速）

# =============================================================================
# 空间配置（扩展后的测试空间）
# =============================================================================

# 训练空间（保持不变，确保模型稳定）
TRAINING_SPACE = {
    'x_range': [-1.5, 1.5],    # X轴范围（米）
    'y_range': [-1.5, 1.5],    # Y轴范围（米） 
    'z_range': [0, 2.0],       # Z轴范围（米）
}

# 测试空间（扩展范围，用于连续导航）
# TESTING_SPACE = {
#     'x_range': [-4.0, 4.0],    # X轴范围（米）- 扩展到8米宽
#     'y_range': [-4.0, 4.0],    # Y轴范围（米）- 扩展到8米长  
#     'z_range': [0.1, 5.0],     # Z轴范围（米）- 扩展到5米高
#     'tilt_limit': 0.6,         # 倾斜角度限制（弧度）- 放宽限制
# }

TESTING_SPACE = {
    'x_range': [-1.5, 1.5],    # X轴范围（米）
    'y_range': [-1.5, 1.5],    # Y轴范围（米） 
    'z_range': [0.05, 2.5],    # Z轴范围（米）- 调整下限和上限以容纳测试点
    'tilt_limit': 0.6,         # 倾斜角度限制（弧度）- 放宽限制
}

# 默认位置配置（适合当前模型的小范围测试）
DEFAULT_INIT_POS = [0, 0, 0.1]      # 默认起始位置 [x, y, z]（米）
DEFAULT_TARGET_POS = [0, 0, 1]  # 更小的默认目标位置，适合测试

# 推荐的测试目标点（在模型训练范围内）
RECOMMENDED_TARGETS = [
    [0.5, 0.5, 1.2],   # 近距离目标
    [0.8, 0.3, 1.1],   # 小幅移动
    [0.3, 0.8, 1.3],   # 另一个角度
    [0.0, 0.5, 1.4],   # 返回中心附近
    [-0.5, 0.0, 1.2],  # 负坐标测试
]

# =============================================================================
# 导航控制配置
# =============================================================================

# 目标容差配置
TARGET_TOLERANCE = {
    'reach_distance': 0.30,     # 到达目标的距离容差（米）- 更严格的到达标准
    'hover_time': 2.0,          # 到达目标后悬停时间（秒）
    'max_approach_time': 30.0,  # 单个目标的最大接近时间（秒）
}

# 飞行安全配置  
SAFETY_LIMITS = {
    'max_velocity': 3.0,        # 最大飞行速度（米/秒）
    'max_acceleration': 5.0,    # 最大加速度（米/秒²）
    'emergency_stop_distance': 0.1,  # 紧急停止距离（米）
}

# =============================================================================
# 用户交互配置
# =============================================================================

# 键盘输入配置
INPUT_CONFIG = {
    'input_timeout': 0.1,       # 输入检测超时时间（秒）
    'coordinate_precision': 2,   # 坐标输入精度（小数位数）
    'prompt_message': "输入新目标 (x,y,z) 或命令: ",
    'help_message': """
连续导航控制命令:
  x y z        - 设置新目标点 (例: 2.5 1.8 2.0)
                 如果当前有目标，将加入队列实现 a->b->c 连续导航
  pause        - 暂停无人机
  resume       - 继续导航  
  home         - 返回起始位置
  current      - 显示当前位置和目标队列
  queue        - 显示目标队列状态
  clear        - 清空目标队列
  
🤖 LLM智能轨迹命令:
  circle / c   - 生成逆时针圆形飞行轨迹
  circle_cw / cc - 生成顺时针圆形飞行轨迹
  stats / s    - 显示当前轨迹统计信息
  visual / v   - 显示轨迹可视化图表
  
其他命令:
  help         - 显示帮助信息
  exit         - 退出程序
  
连续导航说明:
  - 无人机将按顺序访问所有目标点
  - 到达当前目标后自动前往下一个目标
  - 支持实时添加新目标到队列末尾
  - LLM轨迹会自动分解为多个目标点加入队列
    """,
}

# 显示配置
DISPLAY_CONFIG = {
    'update_frequency': 10,      # 状态更新频率（Hz）
    'precision': 3,             # 位置显示精度（小数位数）
    'show_trajectory': True,    # 是否显示轨迹线
    'show_target_marker': True, # 是否显示目标标记
}

# =============================================================================
# 仿真配置
# =============================================================================

# 物理仿真配置（适配RTX4050）
SIMULATION_CONFIG = {
    'pyb_freq': 240,           # PyBullet仿真频率（Hz）
    'ctrl_freq': 30,           # 控制频率（Hz）
    'gui_fps': 60,             # GUI刷新频率（FPS）
    'real_time_factor': 1.0,   # 实时因子（1.0=实时）
}

# 渲染配置
RENDER_CONFIG = {
    'camera_distance': 8.0,     # 相机距离
    'camera_yaw': 45,          # 相机偏航角
    'camera_pitch': -30,       # 相机俯仰角
    'camera_target': [0, 0, 1], # 相机焦点
}

# =============================================================================
# 调试配置
# =============================================================================

# 调试选项
DEBUG_CONFIG = {
    'verbose': True,            # 详细输出模式
    'show_state_info': True,    # 显示状态信息
    'show_performance': True,   # 显示性能信息
    'log_trajectory': False,    # 记录轨迹数据
    'save_trajectory': False,   # 保存轨迹到文件
}

# 日志配置
LOG_CONFIG = {
    'log_level': 'INFO',        # 日志级别
    'log_file': None,           # 日志文件路径（None=不保存）
    'log_format': '[%(levelname)s] %(asctime)s - %(message)s',
}